# 벽 부수고 이동하기
 
# N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 
# 당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다. 
# 최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다.
# 만약에 이동하는 도중에 한 개의 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 벽을 한 개 까지 부수고 이동하여도 된다.
# 한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다.
# 맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 1,000)이 주어진다. 다음 N개의 줄에 M개의 숫자로 맵이 주어진다. (1, 1)과 (N, M)은 항상 0이라고 가정하자.

# 출력
# 첫째 줄에 최단 거리를 출력한다. 불가능할 때는 -1을 출력한다.

# 예제 입력 1 
# 6 5
# 01000
# 11110
# 10010
# 00000
# 01111
# 00000
# 예제 출력 1 
# 15
# 예제 입력 2 
# 4 4
# 0111
# 1111
# 1111
# 1110
# 예제 출력 2 
# -1
from collections import deque
N,M = list(map(int,input().split())) #행렬
q = deque() #큐생성
q.append([0,0,0])
visit = [[[0]*2 for _ in range(M)]for _ in range(N)] #방문했는지 + 몇번째 순서인지  확인하기위해 3차원 리스트생성
visit[0][0][0] = 1 #첫번째 좌표는 이미 방문한것으로 침
Map = [list(map(int,input()))for _ in range(N)]
d = [(-1,0),(1,0),(0,-1),(0,1)] #상하좌우
def bfs():
    while q :
        x,y,wall = q.popleft()
        if x == N-1 and y == M-1 : #만일 결승지점까지 도착했다면
            return visit[x][y][wall] #출력 후 종료
        for i in range(4):
            dx = x + d[i][0]
            dy = y + d[i][1]
            if 0<=dx<N and 0<=dy<M and visit[dx][dy][wall] == 0 :#조건탐색 : 상하좌우가 테두리 안에있고 방문하지 않은 좌표라면
                if Map[dx][dy] == 0 : #이동가능한 좌표라면?
                    q.append([dx,dy,wall])
                    visit[dx][dy][wall] = visit[x][y][wall]+1

                else : #이동불가능한 좌표라면?
                # 세부조건탐색 아직 벽을 안넘어봤다면?
                    if wall == 0 : 
                        q.append([dx,dy,1])
                        visit[dx][dy][1] = visit[x][y][0]+1
                    #이미 넘어봤다면? 움직일 수 없음. 작성 x
    return -1 #큐가 사라질때까지 도달못하면 -1출력
print(bfs())
